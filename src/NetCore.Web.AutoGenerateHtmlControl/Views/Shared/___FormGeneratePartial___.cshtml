@using System.Collections
@using Microsoft.Extensions.DependencyInjection
@using NetCore.Web.AutoGenerateHtmlControl
@using NetCore.Web.AutoGenerateHtmlControl.Attributes


@model NetCore.Web.AutoGenerateHtmlControl.FormViewModel

@inject IServiceProvider ServiceProvider
@inject AutoGenerateFormBuilder Options


@using (Html.BeginForm(Model.FormOptions.ActionName, Model.FormOptions.ControllerName, Model.FormOptions.RouteValues, Model.FormOptions.Method, Model.FormOptions.Antiforgery, Model.FormOptions.HtmlAttributes))
{
    foreach (var item in Model.FormItems)
    {
        <div class="form-group">
            @Html.Label(item.Name, item.DisplayName)
            @foreach (var control in item.Controls)
            {
                switch (control.ControlType)
                {
                    case HtmlControlType.Label:
                        @Html.ExLabel(item.Name, item.Value, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.Hidden:
                        @Html.ExHidden(item.Name, item.Value, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.TextBox:
                        @Html.ExTextBox(item.Name, item.Value, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.Password:
                        @Html.ExPassword(item.Name, item.Value, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.TextArea:
                        @Html.ExTextArea(item.Name, item.Value, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.DropDownList:
                        var dropDownAttr = (DropDownListAttribute)control;
                        var dropDownDataSource = (IDataSource)ServiceProvider.GetRequiredService(dropDownAttr.DataSource);
                        @Html.ExDropDownList(item.Name, await dropDownDataSource.GetAsync(new[] { item.Value }), dropDownAttr.OptionLabel, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.ListBox:
                        var listBoxAttr = (ListBoxAttribute)control;
                        var listBoxDataSource = (IDataSource)ServiceProvider.GetRequiredService(listBoxAttr.DataSource);
                        if (item.Value is IEnumerable)
                        {
                            @Html.ExListBox(item.Name, await listBoxDataSource.GetAsync(item.Value as IEnumerable<object>
                                ), listBoxAttr.OptionLabel, control.GetAttributes(), Model.GlobalCssClass)
                        }
                        else
                        {
                            throw new NotSupportedException($"ListBox does not support type {item.Value.GetType()}.");
                        }
                        break;

                    case HtmlControlType.RadioButton:
                        var radioButtonAttr = (RadioButtonAttribute)control;
                        var radioButtonDataSource = (IDataSource)ServiceProvider.GetRequiredService(radioButtonAttr.DataSource);
                        @Html.ExRadioButton(item.Name, await radioButtonDataSource.GetAsync(new[] { item.Value }), radioButtonAttr.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.CheckBox:
                        var checkBoxAttr = (CheckBoxAttribute)control;
                        var checkBoxDataSource = (IDataSource)ServiceProvider.GetRequiredService(checkBoxAttr.DataSource);
                        if (item.Value is IEnumerable)
                        {
                            @Html.ExCheckBox(item.Name, await checkBoxDataSource.GetAsync(item.Value as IEnumerable<object>
                                ), checkBoxAttr.GetAttributes(), Model.GlobalCssClass)
                        }
                        else
                        {
                            throw new NotSupportedException($"CheckBox does not support type {item.Value.GetType()}.");
                        }
                        break;

                    case HtmlControlType.Button:
                        var buttonAttr = (ButtonAttribute)control;
                        @Html.Button(buttonAttr.ButtonText, buttonAttr.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.File:
                        @Html.ExFile(item.Name, control.GetAttributes(), Model.GlobalCssClass)
                        break;

                    case HtmlControlType.RichEditor:
                        var editorAttr = (RichEditorAttribute)control;
                        @Html.ExRichEditor(item.Name, item.Value?.ToString(), string.IsNullOrWhiteSpace(editorAttr.EditorScript) ? Options.EditorPresetScript : editorAttr.EditorScript)
                        break;

                    case HtmlControlType.Uploader:
                        var uploaderAttr = (UploaderAttribute)control;
                        @Html.Uploader(item.Name, item.Value?.ToString(), string.IsNullOrWhiteSpace(uploaderAttr.ServerUrl) ? Options.UploadServerUrl : uploaderAttr.ServerUrl, string.IsNullOrWhiteSpace(uploaderAttr.Script) ? Options.UploaderPresetScript : uploaderAttr.Script, uploaderAttr.GetAttributes(), Model.GlobalCssClass)
                        break;
                }

            }
            @Html.ValidationMessage(item.Name)
        </div>
    }
}


